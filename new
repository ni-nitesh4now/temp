#include <assert.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#define ALIGN4(s)         (((((s) - 1) >> 2) << 2) + 4)
#define BLOCK_DATA(b)     ((b) + 1)
#define BLOCK_HEADER(ptr) ((struct _block *)(ptr) - 1)

static int atexit_registered = 0;
static int num_mallocs       = 0;
static int num_frees         = 0;
static int num_reuses        = 0;
static int num_grows         = 0;
static int num_splits        = 0;
static int num_coalesces     = 0;
static int num_blocks        = 0;
static int num_requested     = 0;
static int max_heap          = 0;

/*
 *  \brief printStatistics
 *
 *  \param none
 *
 *  Prints the heap statistics upon process exit.  Registered
 *  via atexit()
 *
 *  \return none
 */
void printStatistics( void )
{
  printf("\nheap management statistics\n");
  printf("mallocs:\t%d\n", num_mallocs );
  printf("frees:\t\t%d\n", num_frees );
  printf("reuses:\t\t%d\n", num_reuses );
  printf("grows:\t\t%d\n", num_grows );
  printf("splits:\t\t%d\n", num_splits );
  printf("coalesces:\t%d\n", num_coalesces );
  printf("blocks:\t\t%d\n", num_blocks );
  printf("requested:\t%d\n", max_heap );
  printf("max heap:\t%d\n", num_requested );
}

struct _block 
{
   size_t  size;         /* Size of the allocated _block of memory in bytes */
   struct _block *next;  /* Pointer to the next _block of allcated memory   */
   bool   free;          /* Is this _block free?                            */
   char   padding[3];    /* Padding: IENTRTMzMjAgU3ByaW5nIDIwMjM            */
};


struct _block *heapList = NULL; /* Free list to track the _blocks available */
struct _block *next_cont = NULL; 
/*
 * \brief findFreeBlock
 *
 * \param last pointer to the linked list of free _blocks
 * \param size size of the _block needed in bytes 
 *
 * \return a _block that fits the request or NULL if no free _block matches
 *
 * \TODO Implement Next Fit
 * \TODO Implement Best Fit
 * \TODO Implement Worst Fit
 */
struct _block *findFreeBlock(struct _block **last, size_t size) 
{
   struct _block *curr = heapList;

#if defined FIT && FIT == 0
   /* First fit */
   //
   // While we haven't run off the end of the linked list and
   // while the current node we point to isn't free or isn't big enough
   // then continue to iterate over the list.  This loop ends either
   // with curr pointing to NULL, meaning we've run to the end of the list
   // without finding a node or it ends pointing to a free node that has enough
   // space for the request.
   // 
   while (curr && !(curr->free && curr->size >= size)) 
   {
      *last = curr;
      curr  = curr->next;
   }
#endif

#if defined BEST && BEST == 0
   struct _block *best_fit=NULL; // Initialize the pointer to the best-fit block as NULL
   size_t check = SIZE_MAX; // Initialize the variable to keep track of the smallest suitable block size found as the maximum possible value

   // Iterate through the list of blocks
   while (curr) 
   {
      // Check if the current block is free and has enough size for the requested allocation,
      // and if its size is smaller than the previously found best fit
      if((curr->free && curr->size >= size) && (check > curr->size))
      {
         check = curr->size; // Update the smallest suitable block size found so far
         best_fit = curr; // Update the pointer to the best-fit block
      }
      *last = curr; // Update the pointer to the last visited block
      curr  = curr->next;  // Move to the next block
   }
   curr = best_fit; // Set the current block to the best-fit block found
#endif

#if defined WORST && WORST == 0
   struct _block *worst_fit=NULL; // Initialize the pointer to the worst-fit block as NULL
   size_t check = 0; // Initialize the variable to keep track of the largest suitable block size found as 0

   // Iterate through the list of blocks
   while (curr) 
   {
      // Check if the current block is free and has enough size for the requested allocation,
      // and if its size is larger than the previously found worst fit
      if((curr->free && curr->size >= size) && (check < curr->size))
      {
         check = curr->size; // Update the largest suitable block size found so far
         worst_fit = curr; // Update the pointer to the worst-fit block
      }
      *last = curr; // Update the pointer to the last visited block
      curr  = curr->next;  // Move to the next block
   }
   curr = worst_fit; // Set the current block to the worst-fit block found
#endif

#if defined NEXT && NEXT == 0
   curr = next_cont; // Start the search from the last checked block

   // Iterate through the list of blocks starting from the last checked block
   while(curr && !(curr->free && curr->size >= size))
   {  
      *last = curr; // Update the pointer to the last visited block
      curr  = curr->next; // Move to the next block 
   }

   // If the end of the list is reached without finding a suitable block,
   // start the search from the beginning of the list
   if(!curr)
   {
      curr = heapList; // Start from the beginning of the list
      while(curr && !(curr->free && curr->size >= size))
      {  
         *last = curr; // Update the pointer to the last visited block
         curr  = curr->next; // Move to the next block
         
         // Break the loop if the search reaches the block where the previous search ended
         if(curr == next_cont)
         {
            break;
         }
      }
   }
#endif
   return curr;
}

/*
 * \brief growheap
 *
 * Given a requested size of memory, use sbrk() to dynamically 
 * increase the data segment of the calling process.  Updates
 * the free list with the newly allocated memory.
 *
 * \param last tail of the free _block list
 * \param size size in bytes to request from the OS
 *
 * \return returns the newly allocated _block of NULL if failed
 */
struct _block *growHeap(struct _block *last, size_t size) 
{
   /* Request more space from OS */
   struct _block *curr = (struct _block *)sbrk(0); // Get the current end of the heap
   struct _block *prev = (struct _block *)sbrk(sizeof(struct _block) + size); // Request additional memory from OS

   assert(curr == prev); // Ensure that sbrk() call succeeded

   /* OS allocation failed */
   if (curr == (struct _block *)-1) 
   {
      return NULL; // Return NULL if OS allocation failed
   }

   /* Update heapList if not set */
   if (heapList == NULL) 
   {
      heapList = curr; // Set heapList to the newly allocated block if it's the first block
   }

   /* Attach new _block to previous _block */
   if (last) 
   {
      last->next = curr; // Link the new block to the end of the heap
      num_blocks++; // Increment the count of blocks in the free list
   }

   num_requested += (int) size; // Update the total amount of memory requested

   /* Update _block metadata:
      Set the size of the new block and initialize the new block to "free".
      Set its next pointer to NULL since it's now the tail of the linked list.
   */
   curr->size = size;
   curr->next = NULL;
   curr->free = false;

   return curr; // Return the newly allocated block
}

/*
 * \brief malloc
 *
 * finds a free _block of heap memory for the calling process.
 * if there is no free _block that satisfies the request then grows the 
 * heap and returns a new _block
 *
 * \param size size of the requested memory in bytes
 *
 * \return returns the requested memory allocation to the calling process 
 * or NULL if failed
 */
void *malloc(size_t size) 
{
   max_heap += (int) size; // Update the maximum heap size
   if( atexit_registered == 0 )
   {
      atexit_registered = 1;
      atexit( printStatistics ); // Register printStatistics to be called upon program exit
   }

   /* Align to multiple of 4 */
   size = ALIGN4(size); // Ensure alignment of size to 4 bytes

   /* Handle 0 size */
   if (size == 0) 
   {
      return NULL; // Return NULL for zero size allocation
   }
   num_mallocs++; // Increment the count of successful malloc calls
   
   /* Look for free _block.  If a free block isn't found then we need to grow our heap. */

   struct _block *last = heapList;
   struct _block *next = findFreeBlock(&last, size);

   /* If the block found by findFreeBlock is larger than we need then:
      If the leftover space in the new block is greater than the sizeof(_block)+4 then
      split the block.
      If the leftover space in the new block is less than the sizeof(_block)+4 then
      don't split the block.
   */
   if(next && ((next->size - size) > (sizeof(struct _block)+4)))
   {
      num_splits++; // Increment the count of block splits
      struct _block split_free;
      size_t leftover = next->size - size;
      split_free.size = leftover;
      split_free.free = true;
      split_free.next = next->next;
      next->next = &split_free; // Link the split free block to the next block
      next->size = size; // Adjust the size of the allocated block
      num_blocks++; // Increment the count of blocks in the free list
   }

   /* Could not find free _block, so grow heap */
   if (next == NULL) 
   {
      next = growHeap(last, size); // Try growing the heap to satisfy the allocation
      num_grows++; // Increment the count of heap growths
   }
   else
   {
      next_cont = next; // Update the next fit starting point
   }
   
   /* Could not find free _block or grow heap, so just return NULL */
   if (next == NULL) 
   {
      return NULL; // Return NULL if allocation fails
   }
   else
   {
      num_reuses++; // Increment the count of reused blocks
   }

   /* Mark _block as in use */
   next->free = false;
   
   /* Return data address associated with _block to the user */
   return BLOCK_DATA(next);
}

/*
 * \brief free
 *
 * frees the memory _block pointed to by pointer. if the _block is adjacent
 * to another _block then coalesces (combines) them
 *
 * \param ptr the heap memory to free
 *
 * \return none
 */
void free(void *ptr) 
{
   if (ptr == NULL) 
   {
      return; // If ptr is NULL, exit without performing any operation
   }
   
   num_frees++; // Increment the count of successful free calls

   /* Make _block as free */
   struct _block *curr = BLOCK_HEADER(ptr); // Get the header of the block associated with ptr
   assert(curr->free == 0); // Ensure that the block is not already free
   curr->free = true; // Mark the block as free

   /* Coalesce free _blocks. If the next block or previous block 
      are free then combine them with this block being freed.
   */
   struct _block *free_check = heapList;
   while(free_check && free_check->next)
   {
      if(free_check->free && (free_check->next)->free)
      {
         // Combine the current free block with the next free block
         free_check->size += (size_t)(sizeof(struct _block) + (free_check->next)->size);
         free_check->next = (free_check->next)->next; // Remove the next free block from the list
         free_check = heapList; // Start checking from the beginning of the free list again
         num_coalesces++; // Increment the count of coalesced blocks
         num_blocks--; // Decrement the count of blocks in the free list
      }
      else
      {
         free_check = free_check->next; // Move to the next block in the free list
      }
   }
}

void *calloc(size_t nmemb, size_t size)
{
   // Allocate memory using malloc with the requested size
   void *ptr = malloc(nmemb * size);

   // Check if memory allocation was successful
   if(ptr)
   {
      // If memory allocation was successful, initialize the memory block to 0
      memset(ptr, 0, nmemb * size);
   }

   // Update the max_heap size with the allocated size
   max_heap += (int) size;

   return ptr; // Return the pointer to the allocated memory block
}

void *realloc(void *ptr, size_t size)
{
   // Allocate memory with the new size
   void *realloc_ptr = malloc(size);

   // Calculate the size of the existing memory block pointed to by ptr
   size_t ptr_size = sizeof(*ptr) + size;

   // Check if the original pointer is not NULL
   if(ptr) 
   {
      // If the original pointer is not NULL, copy the contents of the original memory block to the new memory block
      memcpy(realloc_ptr, ptr, ptr_size);

      // Free the original memory block
      free(ptr);
   }

   // Update the max_heap size with the allocated size
   max_heap += (int) size;

   return realloc_ptr; // Return the pointer to the newly allocated memory block
}

/* vim: IENTRTMzMjAgU3ByaW5nIDIwMjM= -----------------------------------------*/
/* vim: set expandtab sts=3 sw=3 ts=6 ft=cpp: --------------------------------*/
